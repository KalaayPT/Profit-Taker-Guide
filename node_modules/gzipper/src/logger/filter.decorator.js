"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filter = void 0;
var Logger_1 = require("./Logger");
var LogLevel_enum_1 = require("./LogLevel.enum");
/**
 * Exec only 'ERROR', 'WARNING', 'SUCCESS' or when 'verbose' flag is available.
 */
function filter() {
    return function (_target, _propertyKey, descriptor) {
        var valueDescriptor = descriptor.value;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _a = __read(args, 2), level = _a[1];
            var shouldLog = Logger_1.Logger.verbose ||
                level === LogLevel_enum_1.LogLevel.ERROR ||
                level === LogLevel_enum_1.LogLevel.WARNING ||
                level === LogLevel_enum_1.LogLevel.SUCCESS;
            return shouldLog ? valueDescriptor.call.apply(valueDescriptor, __spreadArray(__spreadArray([this], __read(args), false), [level], false)) : null;
        };
        return descriptor;
    };
}
exports.filter = filter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sb2dnZXIvZmlsdGVyLmRlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsbUNBQWtDO0FBQ2xDLGlEQUEyQztBQUUzQzs7R0FFRztBQUNILFNBQWdCLE1BQU07SUFLcEIsT0FBTyxVQUFVLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVTtRQUNoRCxJQUFNLGVBQWUsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO1FBRXpDLFVBQVUsQ0FBQyxLQUFLLEdBQUc7WUFBVSxjQUEyQjtpQkFBM0IsVUFBMkIsRUFBM0IscUJBQTJCLEVBQTNCLElBQTJCO2dCQUEzQix5QkFBMkI7O1lBQ2hELElBQUEsS0FBQSxPQUFZLElBQUksSUFBQSxFQUFiLEtBQUssUUFBUSxDQUFDO1lBQ3ZCLElBQU0sU0FBUyxHQUNiLGVBQU0sQ0FBQyxPQUFPO2dCQUNkLEtBQUssS0FBSyx3QkFBUSxDQUFDLEtBQUs7Z0JBQ3hCLEtBQUssS0FBSyx3QkFBUSxDQUFDLE9BQU87Z0JBQzFCLEtBQUssS0FBSyx3QkFBUSxDQUFDLE9BQU8sQ0FBQztZQUU3QixPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLElBQUksT0FBcEIsZUFBZSwrQkFBTSxJQUFJLFVBQUssSUFBSSxZQUFFLEtBQUssV0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3ZFLENBQUMsQ0FBQztRQUVGLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUMsQ0FBQztBQUNKLENBQUM7QUFyQkQsd0JBcUJDIn0=