"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Incremental = void 0;
var fs_1 = __importDefault(require("fs"));
var crypto_1 = __importDefault(require("crypto"));
var path_1 = __importDefault(require("path"));
var util_1 = __importDefault(require("util"));
var uuid_1 = require("uuid");
var deep_equal_1 = __importDefault(require("deep-equal"));
var constants_1 = require("./constants");
var helpers_1 = require("./helpers");
var Incremental = /** @class */ (function () {
    /**
     * Creates an instance of Incremental.
     */
    function Incremental(config) {
        this.nativeFs = {
            exists: util_1.default.promisify(fs_1.default.exists),
            unlink: util_1.default.promisify(fs_1.default.unlink),
            readdir: util_1.default.promisify(fs_1.default.readdir),
            lstat: util_1.default.promisify(fs_1.default.lstat),
            rmdir: util_1.default.promisify(fs_1.default.rmdir),
        };
        this._filePaths = new Map();
        if (config) {
            this.config = config;
        }
        this._cacheFolder = path_1.default.resolve(process.cwd(), constants_1.CONFIG_FOLDER, constants_1.CACHE_FOLDER);
    }
    Object.defineProperty(Incremental.prototype, "cacheFolder", {
        get: function () {
            return this._cacheFolder;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Incremental.prototype, "filePaths", {
        get: function () {
            return Object.fromEntries(this._filePaths);
        },
        set: function (value) {
            this._filePaths = new Map(Object.entries(value));
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Read config (.gzipperconfig).
     */
    Incremental.prototype.readConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var incrementalConfig;
            return __generator(this, function (_a) {
                incrementalConfig = this.config.configContent.incremental;
                if (incrementalConfig) {
                    this._filePaths = new Map(Object.entries(incrementalConfig.files));
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * update config (.gzipperconfig).
     */
    Incremental.prototype.updateConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.config.setProperty('incremental', {
                    files: helpers_1.Helpers.mapToJSON(this._filePaths),
                });
                return [2 /*return*/];
            });
        });
    };
    /**
     * Create cache folder (.gzipper).
     */
    Incremental.prototype.initCacheFolder = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.nativeFs.exists(this._cacheFolder)];
                    case 1:
                        if (!!(_a.sent())) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.Helpers.createFolders(this._cacheFolder)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns file incremental info and save checksum and options to `filePath` (if file is changed or newly created).
     */
    Incremental.prototype.setFile = function (target, checksum, compressionType, compressOptions) {
        var filePath = this._filePaths.get(target);
        var selectedRevision = filePath === null || filePath === void 0 ? void 0 : filePath.revisions.find(function (revision) {
            return compressionType === revision.compressionType &&
                (0, deep_equal_1.default)(revision.options, compressOptions);
        });
        if (!filePath) {
            var fileId = (0, uuid_1.v4)();
            this._filePaths.set(target, {
                revisions: [
                    {
                        lastChecksum: checksum,
                        fileId: fileId,
                        date: new Date(),
                        compressionType: compressionType,
                        options: compressOptions,
                    },
                ],
            });
            return {
                isChanged: true,
                fileId: fileId,
            };
        }
        if (!selectedRevision) {
            var fileId = (0, uuid_1.v4)();
            this._filePaths.set(target, {
                revisions: filePath.revisions.concat({
                    lastChecksum: checksum,
                    fileId: fileId,
                    date: new Date(),
                    compressionType: compressionType,
                    options: compressOptions,
                }),
            });
            return {
                isChanged: true,
                fileId: fileId,
            };
        }
        if (selectedRevision.lastChecksum !== checksum) {
            this._filePaths.set(target, {
                revisions: filePath.revisions.map(function (revision) {
                    return revision.fileId === selectedRevision.fileId
                        ? __assign(__assign({}, revision), { date: new Date(), lastChecksum: checksum }) : revision;
                }),
            });
            return {
                isChanged: true,
                fileId: selectedRevision.fileId,
            };
        }
        return {
            isChanged: false,
            fileId: selectedRevision.fileId,
        };
    };
    /**
     * Returns file checksum.
     */
    Incremental.prototype.getFileChecksum = function (target) {
        return __awaiter(this, void 0, void 0, function () {
            var hash, stream;
            return __generator(this, function (_a) {
                hash = crypto_1.default.createHash('md5');
                stream = fs_1.default.createReadStream(target);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        stream.on('data', function (data) { return hash.update(data, 'utf8'); });
                        stream.on('end', function () { return resolve(hash.digest('hex')); });
                        stream.on('error', function (error) { return reject(error); });
                    })];
            });
        });
    };
    /**
     * Purge cache folder.
     */
    Incremental.prototype.cachePurge = function () {
        return __awaiter(this, void 0, void 0, function () {
            var recursiveRemove;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.nativeFs.exists(this._cacheFolder)];
                    case 1:
                        if (!(_a.sent())) {
                            throw new Error('No cache found.');
                        }
                        recursiveRemove = function (folderPath) {
                            if (folderPath === void 0) { folderPath = _this._cacheFolder; }
                            return __awaiter(_this, void 0, void 0, function () {
                                var files, files_1, files_1_1, file, filePath, isDirectory, e_1_1;
                                var e_1, _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0: return [4 /*yield*/, this.nativeFs.readdir(folderPath)];
                                        case 1:
                                            files = _b.sent();
                                            _b.label = 2;
                                        case 2:
                                            _b.trys.push([2, 10, 11, 12]);
                                            files_1 = __values(files), files_1_1 = files_1.next();
                                            _b.label = 3;
                                        case 3:
                                            if (!!files_1_1.done) return [3 /*break*/, 9];
                                            file = files_1_1.value;
                                            filePath = path_1.default.resolve(folderPath, file);
                                            return [4 /*yield*/, this.nativeFs.lstat(filePath)];
                                        case 4:
                                            isDirectory = (_b.sent()).isDirectory();
                                            if (!isDirectory) return [3 /*break*/, 6];
                                            return [4 /*yield*/, recursiveRemove(filePath)];
                                        case 5:
                                            _b.sent();
                                            return [3 /*break*/, 8];
                                        case 6: return [4 /*yield*/, this.nativeFs.unlink(filePath)];
                                        case 7:
                                            _b.sent();
                                            _b.label = 8;
                                        case 8:
                                            files_1_1 = files_1.next();
                                            return [3 /*break*/, 3];
                                        case 9: return [3 /*break*/, 12];
                                        case 10:
                                            e_1_1 = _b.sent();
                                            e_1 = { error: e_1_1 };
                                            return [3 /*break*/, 12];
                                        case 11:
                                            try {
                                                if (files_1_1 && !files_1_1.done && (_a = files_1.return)) _a.call(files_1);
                                            }
                                            finally { if (e_1) throw e_1.error; }
                                            return [7 /*endfinally*/];
                                        case 12: return [4 /*yield*/, this.nativeFs.rmdir(folderPath)];
                                        case 13:
                                            _b.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            });
                        };
                        return [4 /*yield*/, recursiveRemove()];
                    case 2:
                        _a.sent();
                        this.config.deleteProperty('incremental');
                        return [4 /*yield*/, this.config.writeConfig()];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns cache size.
     */
    Incremental.prototype.cacheSize = function (folderPath, size) {
        if (folderPath === void 0) { folderPath = this._cacheFolder; }
        if (size === void 0) { size = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var files, files_2, files_2_1, file, filePath, fileStat, _a, e_2_1;
            var e_2, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.nativeFs.exists(this._cacheFolder)];
                    case 1:
                        if (!(_c.sent())) {
                            throw new Error('No cache found.');
                        }
                        return [4 /*yield*/, this.nativeFs.readdir(folderPath)];
                    case 2:
                        files = _c.sent();
                        if (!files.length) {
                            return [2 /*return*/, 0];
                        }
                        _c.label = 3;
                    case 3:
                        _c.trys.push([3, 10, 11, 12]);
                        files_2 = __values(files), files_2_1 = files_2.next();
                        _c.label = 4;
                    case 4:
                        if (!!files_2_1.done) return [3 /*break*/, 9];
                        file = files_2_1.value;
                        filePath = path_1.default.resolve(folderPath, file);
                        return [4 /*yield*/, this.nativeFs.lstat(filePath)];
                    case 5:
                        fileStat = _c.sent();
                        if (!fileStat.isDirectory()) return [3 /*break*/, 7];
                        _a = size;
                        return [4 /*yield*/, this.cacheSize(filePath, size)];
                    case 6:
                        size = _a + _c.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        if (fileStat.isFile()) {
                            size += fileStat.size;
                        }
                        _c.label = 8;
                    case 8:
                        files_2_1 = files_2.next();
                        return [3 /*break*/, 4];
                    case 9: return [3 /*break*/, 12];
                    case 10:
                        e_2_1 = _c.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 12];
                    case 11:
                        try {
                            if (files_2_1 && !files_2_1.done && (_b = files_2.return)) _b.call(files_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 12: return [2 /*return*/, size];
                }
            });
        });
    };
    return Incremental;
}());
exports.Incremental = Incremental;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5jcmVtZW50YWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvSW5jcmVtZW50YWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDBDQUFvQjtBQUNwQixrREFBNEI7QUFDNUIsOENBQXdCO0FBQ3hCLDhDQUF3QjtBQUN4Qiw2QkFBMEI7QUFDMUIsMERBQW1DO0FBRW5DLHlDQUEwRDtBQUMxRCxxQ0FBb0M7QUFJcEM7SUF3QkU7O09BRUc7SUFDSCxxQkFBWSxNQUFlO1FBMUJWLGFBQVEsR0FBRztZQUMxQixNQUFNLEVBQUUsY0FBSSxDQUFDLFNBQVMsQ0FBQyxZQUFFLENBQUMsTUFBTSxDQUFDO1lBQ2pDLE1BQU0sRUFBRSxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQUUsQ0FBQyxNQUFNLENBQUM7WUFDakMsT0FBTyxFQUFFLGNBQUksQ0FBQyxTQUFTLENBQUMsWUFBRSxDQUFDLE9BQU8sQ0FBQztZQUNuQyxLQUFLLEVBQUUsY0FBSSxDQUFDLFNBQVMsQ0FBQyxZQUFFLENBQUMsS0FBSyxDQUFDO1lBQy9CLEtBQUssRUFBRSxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQUUsQ0FBQyxLQUFLLENBQUM7U0FDaEMsQ0FBQztRQUdNLGVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBZ0MsQ0FBQztRQWtCM0QsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztTQUN0QjtRQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FDOUIsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUNiLHlCQUFhLEVBQ2Isd0JBQVksQ0FDYixDQUFDO0lBQ0osQ0FBQztJQXhCRCxzQkFBSSxvQ0FBVzthQUFmO1lBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNCLENBQUM7OztPQUFB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