"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Index = void 0;
var commander_1 = require("commander");
var Compress_1 = require("./Compress");
var helpers_1 = require("./helpers");
var Incremental_1 = require("./Incremental");
var Config_1 = require("./Config");
var Logger_1 = require("./logger/Logger");
var LogLevel_enum_1 = require("./logger/LogLevel.enum");
var Index = /** @class */ (function () {
    function Index() {
        this.argv = process.argv;
        this.env = process.env;
        this.commander = new commander_1.Command();
    }
    Index.prototype.exec = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.commander.version(helpers_1.Helpers.getVersion()).name('gzipper');
                        this.commander
                            .command('compress <path> [outputPath]')
                            .alias('c')
                            .description('compress selected path and optionally set output directory')
                            .option('-v, --verbose', 'detailed level of logs')
                            .option('--incremental', 'incremental compression')
                            .option('-e, --exclude <extensions>', 'exclude file extensions from compression, example: jpeg,jpg...', this.optionToArray.bind(this))
                            .option('-i, --include <extensions>', 'include file extensions for compression, example: js,css,html...', this.optionToArray.bind(this))
                            .option('-t, --threshold <number>', 'exclude assets smaller than this byte size. 0 (default)', function (value) { return parseInt(value); })
                            .option('--deflate', 'enable deflate compression')
                            .option('--brotli', 'enable brotli compression')
                            .option('--gzip', 'enable gzip compression')
                            .option('--zopfli', 'enable zopfli compression')
                            .option('--zstd', 'enable zstd compression')
                            .option('--gzip-level <number>', 'gzip compression level 6 (default), 0 (no compression) - 9 (best compression)', function (value) { return parseInt(value); })
                            .option('--gzip-memory-level <number>', 'amount of memory which will be allocated for gzip compression 8 (default), 1 (minimum memory) - 9 (maximum memory)', function (value) { return parseInt(value); })
                            .option('--gzip-strategy <number>', 'gzip compression strategy 0 (default), 1 (filtered), 2 (huffman only), 3 (RLE), 4 (fixed)', function (value) { return parseInt(value); })
                            .option('--deflate-level <number>', 'deflate compression level 6 (default), 0 (no compression) - 9 (best compression)', function (value) { return parseInt(value); })
                            .option('--deflate-memory-level <number>', 'amount of memory which will be allocated for deflate compression 8 (default), 1 (minimum memory) - 9 (maximum memory)', function (value) { return parseInt(value); })
                            .option('--deflate-strategy <number>', 'deflate compression strategy 0 (default), 1 (filtered), 2 (huffman only), 3 (RLE), 4 (fixed)', function (value) { return parseInt(value); })
                            .option('--brotli-param-mode <value>', 'default, text (for UTF-8 text), font (for WOFF 2.0 fonts)')
                            .option('--brotli-quality <number>', 'brotli compression quality 11 (default), 0 - 11', function (value) { return parseInt(value); })
                            .option('--brotli-size-hint <number>', 'expected input size 0 (default)', function (value) { return parseInt(value); })
                            .option('--zopfli-num-iterations <number>', 'maximum amount of times to rerun forward and backward pass to optimize LZ77 compression cost', function (value) { return parseInt(value); })
                            .option('--zopfli-block-splitting', 'splits the data in multiple deflate blocks with optimal choice for the block boundaries')
                            .option('--zopfli-block-splitting-max <number>', 'maximum amount of blocks to split into (0 for unlimited, but this can give extreme results that hurt compression on some files)', function (value) { return parseInt(value); })
                            .option('--zstd-level <number>', 'zstd compression level 1 (default), 5 (best compression)', function (value) { return parseInt(value); })
                            .option('--output-file-format <value>', 'output file format with default artifacts [filename].[ext].[compressExt]')
                            .option('--remove-larger', 'remove compressed files if they larger than uncompressed originals')
                            .option('--skip-compressed', 'skip compressed files if they already exist')
                            .option('--workers <number>', 'numbers of workers which will be spawned, system CPU cores count (default)', function (value) { return parseInt(value); })
                            .option('--no-color', 'disable logger colorful messages')
                            .action(this.compress.bind(this));
                        cache = this.commander
                            .command('cache')
                            .description('manipulations with cache');
                        cache
                            .command('purge')
                            .description('purge cache storage')
                            .action(this.cachePurge.bind(this));
                        cache
                            .command('size')
                            .description('size of cached resources')
                            .action(this.cacheSize.bind(this));
                        return [4 /*yield*/, this.commander.parseAsync(this.argv)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Index.prototype.compress = function (target, outputPath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var adjustedOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        adjustedOptions = {
                            verbose: this.env.GZIPPER_VERBOSE
                                ? !!parseInt(this.env.GZIPPER_VERBOSE)
                                : options.verbose,
                            incremental: this.env.GZIPPER_INCREMENTAL
                                ? !!parseInt(this.env.GZIPPER_INCREMENTAL)
                                : options.incremental,
                            exclude: this.optionToArray(this.env.GZIPPER_EXCLUDE) ||
                                options.exclude,
                            include: this.optionToArray(this.env.GZIPPER_INCLUDE) ||
                                options.include,
                            threshold: parseInt(this.env.GZIPPER_THRESHOLD) ||
                                options.threshold ||
                                0,
                            brotli: this.env.GZIPPER_BROTLI
                                ? !!parseInt(this.env.GZIPPER_BROTLI)
                                : options.brotli,
                            deflate: this.env.GZIPPER_DEFLATE
                                ? !!parseInt(this.env.GZIPPER_DEFLATE)
                                : options.deflate,
                            gzip: this.env.GZIPPER_GZIP
                                ? !!parseInt(this.env.GZIPPER_GZIP)
                                : options.gzip,
                            zopfli: this.env.GZIPPER_ZOPFLI
                                ? !!parseInt(this.env.GZIPPER_ZOPFLI)
                                : options.zopfli,
                            zstd: this.env.GZIPPER_ZSTD
                                ? !!parseInt(this.env.GZIPPER_ZSTD)
                                : options.zstd,
                            gzipLevel: parseInt(this.env.GZIPPER_GZIP_LEVEL) || options.gzipLevel,
                            gzipMemoryLevel: parseInt(this.env.GZIPPER_GZIP_MEMORY_LEVEL) ||
                                options.gzipMemoryLevel,
                            gzipStrategy: parseInt(this.env.GZIPPER_GZIP_STRATEGY) ||
                                options.gzipStrategy,
                            deflateLevel: parseInt(this.env.GZIPPER_DEFLATE_LEVEL) ||
                                options.deflateLevel,
                            deflateMemoryLevel: parseInt(this.env.GZIPPER_DEFLATE_MEMORY_LEVEL) ||
                                options.deflateMemoryLevel,
                            deflateStrategy: parseInt(this.env.GZIPPER_DEFLATE_STRATEGY) ||
                                options.deflateStrategy,
                            brotliParamMode: this.env.GZIPPER_BROTLI_PARAM_MODE || options.brotliParamMode,
                            brotliQuality: parseInt(this.env.GZIPPER_BROTLI_QUALITY) ||
                                options.brotliQuality,
                            brotliSizeHint: parseInt(this.env.GZIPPER_BROTLI_SIZE_HINT) ||
                                options.brotliSizeHint,
                            zopfliNumIterations: parseInt(this.env.GZIPPER_ZOPFLI_NUM_ITERATIONS) ||
                                options.zopfliNumIterations,
                            zopfliBlockSplitting: this.env.GZIPPER_ZOPFLI_BLOCK_SPLITTING
                                ? !!parseInt(this.env.GZIPPER_ZOPFLI_BLOCK_SPLITTING)
                                : options.zopfliBlockSplitting,
                            zopfliBlockSplittingMax: parseInt(this.env.GZIPPER_ZOPFLI_BLOCK_SPLITTING_MAX) ||
                                options.zopfliBlockSplittingMax,
                            zstdLevel: parseInt(this.env.GZIPPER_ZSTD_LEVEL) || options.zstdLevel,
                            outputFileFormat: this.env.GZIPPER_OUTPUT_FILE_FORMAT || options.outputFileFormat,
                            removeLarger: this.env.GZIPPER_REMOVE_LARGER
                                ? !!parseInt(this.env.GZIPPER_REMOVE_LARGER)
                                : options.removeLarger,
                            skipCompressed: this.env.GZIPPER_SKIP_COMPRESSED
                                ? !!parseInt(this.env.GZIPPER_SKIP_COMPRESSED)
                                : options.skipCompressed,
                            workers: parseInt(this.env.GZIPPER_WORKERS) || options.workers,
                            color: helpers_1.Helpers.getLogColor(options.color, this.env),
                        };
                        return [4 /*yield*/, this.runCompress(target, outputPath, adjustedOptions)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Index.prototype.cachePurge = function () {
        return __awaiter(this, void 0, void 0, function () {
            var config, incremental, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger_1.Logger.setOptions({
                            verbose: true,
                        });
                        config = new Config_1.Config();
                        incremental = new Incremental_1.Incremental(config);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, incremental.cachePurge()];
                    case 2:
                        _a.sent();
                        Logger_1.Logger.log('Cache has been purged, you are free to initialize a new one.', LogLevel_enum_1.LogLevel.SUCCESS);
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        Logger_1.Logger.log(err_1, LogLevel_enum_1.LogLevel.ERROR);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Index.prototype.cacheSize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var incremental, size, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger_1.Logger.setOptions({
                            verbose: true,
                        });
                        incremental = new Incremental_1.Incremental();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, incremental.cacheSize()];
                    case 2:
                        size = _a.sent();
                        Logger_1.Logger.log(size
                            ? "Cache size is ".concat(helpers_1.Helpers.readableSize(size))
                            : "Cache is empty, initialize a new one with --incremental option.", LogLevel_enum_1.LogLevel.INFO);
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        Logger_1.Logger.log(err_2, LogLevel_enum_1.LogLevel.ERROR);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Index.prototype.runCompress = function (target, outputPath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var compress, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger_1.Logger.setOptions({
                            verbose: true,
                        });
                        compress = new Compress_1.Compress(target, outputPath, this.filterOptions(options));
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, compress.run()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        Logger_1.Logger.log(err_3, LogLevel_enum_1.LogLevel.ERROR);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    // Delete undefined and NaN options.
    Index.prototype.filterOptions = function (options) {
        return Object.keys(options)
            .filter(function (key) {
            return (Object.prototype.hasOwnProperty.call(options, key) &&
                !(options[key] === undefined ||
                    options[key] !==
                        options[key]));
        })
            .reduce(function (obj, key) {
            var _a;
            return (__assign(__assign({}, obj), (_a = {}, _a[key] = options[key], _a)));
        }, {});
    };
    Index.prototype.optionToArray = function (value) {
        if (typeof value === 'string' && value) {
            return value.split(',').map(function (item) { return item.trim(); });
        }
        return value;
    };
    return Index;
}());
exports.Index = Index;
if (process.env.NODE_ENV !== 'test') {
    new Index().exec();
}
//# sourceMappingURL=data:application/json;base64,