"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompressService = void 0;
var Brotli_1 = require("./compressions/Brotli");
var Deflate_1 = require("./compressions/Deflate");
var Gzip_1 = require("./compressions/Gzip");
var Zopfli_1 = require("./compressions/Zopfli");
var Zstd_1 = require("./compressions/Zstd");
var constants_1 = require("./constants");
var CompressService = /** @class */ (function () {
    /**
     * Creates an instance of CompressService.
     */
    function CompressService(options) {
        this.options = options;
    }
    /**
     * Return compression instances.
     */
    CompressService.prototype.getCompressionInstances = function () {
        var instances = [];
        if (this.options.brotli) {
            instances.push(new Brotli_1.BrotliCompression(this.options));
        }
        if (this.options.deflate) {
            instances.push(new Deflate_1.DeflateCompression(this.options));
        }
        if (this.options.zopfli) {
            instances.push(new Zopfli_1.ZopfliCompression(this.options));
        }
        if (this.options.zstd) {
            instances.push(new Zstd_1.ZstdCompression(this.options));
        }
        if (this.options.gzip || !instances.length) {
            instances.push(new Gzip_1.GzipCompression(this.options));
        }
        return instances;
    };
    /**
     * Returns if the file extension is valid.
     */
    CompressService.prototype.isValidFileExtensions = function (ext) {
        if (constants_1.COMPRESSION_EXTENSIONS.includes(ext)) {
            return false;
        }
        var excludeExtensions = this.options.exclude;
        var includeExtensions = this.options.include;
        if (includeExtensions === null || includeExtensions === void 0 ? void 0 : includeExtensions.length) {
            return includeExtensions.includes(ext);
        }
        if (excludeExtensions === null || excludeExtensions === void 0 ? void 0 : excludeExtensions.length) {
            return !excludeExtensions.includes(ext);
        }
        return true;
    };
    return CompressService;
}());
exports.CompressService = CompressService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcHJlc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db21wcmVzcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGdEQUEwRDtBQUMxRCxrREFBNEQ7QUFDNUQsNENBQXNEO0FBQ3RELGdEQUEwRDtBQUMxRCw0Q0FBc0Q7QUFDdEQseUNBQXFEO0FBSXJEO0lBR0U7O09BRUc7SUFDSCx5QkFBWSxPQUF3QjtRQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRUQ7O09BRUc7SUFDSSxpREFBdUIsR0FBOUI7UUFDRSxJQUFNLFNBQVMsR0FBc0IsRUFBRSxDQUFDO1FBQ3hDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDdkIsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLDBCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO1FBRUQsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUN4QixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksNEJBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDdEQ7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ3ZCLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSwwQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNyRDtRQUVELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDckIsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLHNCQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtZQUMxQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksc0JBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNuRDtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7T0FFRztJQUNJLCtDQUFxQixHQUE1QixVQUE2QixHQUEwQjtRQUNyRCxJQUFJLGtDQUFzQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN4QyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUMvQyxJQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBRS9DLElBQUksaUJBQWlCLGFBQWpCLGlCQUFpQix1QkFBakIsaUJBQWlCLENBQUUsTUFBTSxFQUFFO1lBQzdCLE9BQU8saUJBQWlCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hDO1FBRUQsSUFBSSxpQkFBaUIsYUFBakIsaUJBQWlCLHVCQUFqQixpQkFBaUIsQ0FBRSxNQUFNLEVBQUU7WUFDN0IsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQTFERCxJQTBEQztBQTFEWSwwQ0FBZSJ9